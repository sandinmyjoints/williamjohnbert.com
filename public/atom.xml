<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[William John Bert]]></title>
  <link href="http://williamjohnbert.com/atom.xml" rel="self"/>
  <link href="http://williamjohnbert.com/"/>
  <updated>2015-02-18T07:58:01-08:00</updated>
  <id>http://williamjohnbert.com/</id>
  <author>
    <name><![CDATA[William John Bert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I'd like Node and io.js to merge]]></title>
    <link href="http://williamjohnbert.com/2015/02/why-id-like-node-and-io-dot-js-to-merge/"/>
    <updated>2015-02-17T18:46:00-08:00</updated>
    <id>http://williamjohnbert.com/2015/02/why-id-like-node-and-io-dot-js-to-merge</id>
    <content type="html"><![CDATA[<p>I made <a href="http://nodegovernance.io/">nodegovernance.io</a> &mdash; which encourages Node
users to express support for using io.js&#8217;s open governance model as the basis
for the Node foundation&#8217;s technical committee &mdash; because from where I sit,
one Node with a technical committee composed of the best technical people is the
ideal outcome of this situation.</p>

<p>My life would be easier if there were just one Node. My team wouldn&#8217;t have to
spend time discussing and deciding which to use. There wouldn&#8217;t be any confusion
in the future about whether <code>npm install</code> would give me a module I could use
with whatever runtime I happened to be using.</p>

<p>The
<a href="https://medium.com/@iojs/io-js-and-a-node-js-foundation-4e14699fb7be">recent Medium post</a>
said that io.js met with Joyent CEO Scott Hammond last week, so I&#8217;m sure he
knows exactly where they stand.</p>

<p>And the big companies that are already on the foundation board are certainly
going to get input into the rules for the technical committtee.</p>

<p>What about the rest of us &mdash; engineers who use Node / io.js every day but
aren&#8217;t inner core, who don&#8217;t work for an IBM or a PayPal, who want stability and
also language improvements that will make our jobs easier?</p>

<p>I hated the idea of looking back a few months from now, in the midst of heated
discussions about whether to use Node or io.js, with <span style="white-space:nowrap;"><code>npm install</code>s</span> failing all around me, and wondering if there was
anything I could have done to prevent this situation. A tweet doesn&#8217;t count for
all that much, but it&#8217;s more than nothing.</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/williamjohnbert">@williamjohnbert</a> Thanks William. The TC will consider that when they define the governance model.</p>&mdash; Scott Hammond (@Scott_Hammond) <a href="https://twitter.com/Scott_Hammond/status/566045931657633792">February 13, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Github Pages to hand off a legacy site and make everyone happier]]></title>
    <link href="http://williamjohnbert.com/2014/04/handing-off-a-legacy-site/"/>
    <updated>2014-04-30T18:52:00-07:00</updated>
    <id>http://williamjohnbert.com/2014/04/handing-off-a-legacy-site</id>
    <content type="html"><![CDATA[<p>Here&#8217;s how I turned over maintenance of a legacy site &#8211; built as a one-off
project years ago using now outdated technology &#8211; to my non-techincal
cofounder, with only a few hours of work. Best of all, it now uses evergreen
technology that will make it easy for her to update for years to come, and
everyone is happy with the outcome.</p>

<h3>The problem</h3>

<p>I created <a href="http://www.callandresponsedc.org">Call and Response</a> when my friend
Kira and I decided to co-curate an art show of that name in 2010. It became an
annual event, and each year I updated the website with the new participants and
details. This year, Kira is continuing the show with support from others because
I&#8217;m out of capacity to help.</p>

<p>Kira needs to be be able to update the website. It lists what the concept behind
the show is; who&#8217;s participating; where the show is; when it opens; and more. I
created the original website using <a href="http://www.djangoproject.com">Django</a> as a
learning exercise when I was fairly new to web development. I went all out by my
standards of the time, creating a simple micro-CMS that helped me learn about
the MVC pattern, etc.</p>

<p>However, the project had no use outside of this particular website. It could not
be generalized without a significant overhaul, and I had no need to generalize
it. In fact, I had no interest in maintaining it or even working with it. I
built it with Django 1.3, and hosted it with a service that I don&#8217;t use anymore.</p>

<p>Usually, in such a case, it&#8217;s tough luck for the the web developer. Kira is not
a web developer and has no interest in becoming one; she just wants to be able
to update her website. The responsible thing is to step up to to the task, and
keep the site going.</p>

<p>This time I had an idea for how to reach the end goal of the site being updated
in a timely way yet still ditching the legacy code. I thought I saw a path
forward to handing it off to her in a way that would let her easily edit text,
links, and images, and create new pages.</p>

<h3>The solution</h3>

<p>Here&#8217;s how I converted the site from a Django project that only someone who knew
Python could update into a flat site that anyone could edit by knowing only the
most basic HTML:</p>

<p>\1. Scrape.</p>

<p>  This seemed like something I could do fairly easily with my current web
  programming tool of choice &#8211; Node.js. I just had too download and write to disk
  every page I could find by following links that had the same host. But often
  with things that seem straightforward, the devil&#8217;s often in the details, and
  anyway, I figured someone else must have wanted to do this, so there had to be a
  tool for it, which would turn this from fairly easily into dead simple.</p>

<p>  The tool I found is called <a href="http://www.httrack.com/">HTTrack</a>.</p>

<pre><code>$ brew install httrack
</code></pre>

<p>  I ran it against <a href="http://www.callandresponsedc.org">Call and Response</a>,
  selecting all the default options.</p>

<pre><code>$ httrack "www.callandresponsedc.org" -v
</code></pre>

<p>  Lo and behold, it did exactly what I wanted. Now I had a full static version of
  the site.</p>

<p>\2. Host.</p>

<p>I needed to host this static site somewhere free, reliable, and easy to use. I
created a Github organization, initialized a git repo, created a branch named
<code>gh-pages</code>, and pushed it to Github. Now the site was up at
<code>callandresponsedc.github.io/callandresponsedc</code>, (albeit in a broken form due to
the static assets&#8217; root-relative paths resulting in 404s).</p>

<p>Then I added a
<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages">CNAME</a>
for callandresponsedc.org, and I switched the DNS from my old hosting provider
to the name service, and added the
<a href="http://davidensinger.com/2013/03/setting-the-dns-for-github-pages-on-namecheap/">right DNS entries</a></p>

<p>Once the DNS changes took effect, the new static site was up where it needed to
be: http://callandresponsedc.org. And it looked <em>exactly</em> as it had before: to
any visitor who saw it before the change and again after, no difference would
have been apparent.</p>

<p>\3. Enable.</p>

<p>While I&#8217;d waited for the DNS to change, I&#8217;d asked Kira to create a github account,
added her to the organization, and spent 15 minutes writing up a brief guide to
how to edit the HTML pages using Github.</p>

<p>Thanks to
<a href="https://github.com/blog/905-edit-like-an-ace">github&#8217;s editing tools</a>, she now
had the ability to make changes that would take effect instantly.</p>

<p>Technically, at this point, I was no longer needed. I could have handed it over
now. Kira was enabled to do everything she needed to do. But I would have had to
add a caveat: &#8220;By the way, when you want to change anything in the menu, or
header, or footer, or to add a new logo or change colors, you have to do it on
<em>every single page</em>.&#8221;</p>

<p>Because Httrack, good as it is, is not good enough to produce DRY results. Each
page of the static site repeated all the same HTML structure for its header and
footer and body, and contained its own set of inline styles. Changing any part
of that would have meant changing every page. There weren&#8217;t a lot pages, but
nonetheless, I didn&#8217;t want to force that burden on K.</p>

<p>I could do better.</p>

<p>\4. Refactor.</p>

<p>Large parts of the pages were identical, so I could factor them out into
includes, and make a couple of simple layout templates composed of these. Same
idea with the stylesheet.</p>

<p>To make this work, I had to use something slightly more complicated than flat
HTML files. I decided to convert the site to use
<a href="https://help.github.com/articles/using-jekyll-with-pages">(Github-flavored) Jekyll</a>.
I won&#8217;t repeat the instructions needed to get that up and running; just follow
the link, and do what it says. It takes on the order of a few minutes.</p>

<p>To refactor, I just needed to figure out exactly what was common to all pages,
hack it out into includes, and reassemble the includes as templates. Then I&#8217;d
specify which template to use via YAML front-matter on each page, and voila, my
Jekyll site would be done. Because I use
<a href="http://www.gnu.org/software/emacs/">Emacs</a>, I used
<a href="http://www.gnu.org/software/emacs/manual/html_mono/ediff.html">ediff</a>, but you
could do this with any diffing tool and text editor.</p>

<p>A nice side effect of this was that the pages that Kira would be editing got much
simple. They went from something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;content-type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html;charset=utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>About - Call + Response
</span><span class='line'>  <span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://platform.twitter.com/anywhere.js?id=IrVoVLmkJDVw9Pagwdxsow&amp;amp;v=1&quot;</span>
</span><span class='line'>          <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;Call + Response is an art show in Washington, DC, pairing writers and artists.&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;William John Bert&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;/static/fonts/fonts.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;/static/css/bootstrap.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;/static/css/bootstrap-responsive.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;/static/css/style.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;fb-root&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">js</span><span class="p">,</span> <span class="nx">fjs</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="nx">s</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">js</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span> <span class="nx">js</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">id</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">js</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">&quot;http://connect.facebook.net/en_US/all.js#xfbml=1&amp;appId=398123750217250&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">fjs</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">js</span><span class="p">,</span> <span class="nx">fjs</span><span class="p">);</span>
</span><span class='line'><span class="p">}(</span><span class="nb">document</span><span class="p">,</span> <span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;facebook-jssdk&#39;</span><span class="p">));</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar navbar-fixed-top&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar-inner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container-fluid&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;brand&quot;</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Call + Response
</span><span class='line'>      <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container-fluid&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row-fluid&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;well sidebar-nav&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav nav-list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/about&quot;</span><span class="nt">&gt;</span>About
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/opening&quot;</span><span class="nt">&gt;</span>Opening
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/participants&quot;</span><span class="nt">&gt;</span>Participants
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/sponsors&quot;</span><span class="nt">&gt;</span>Sponsors
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/contact&quot;</span><span class="nt">&gt;</span>Contact
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/press&quot;</span><span class="nt">&gt;</span>Press
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span9&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;chiclet pull-right visible-desktop&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://twitter.com/share&quot;</span> <span class="na">class=</span><span class="s">&quot;twitter-share-button&quot;</span> <span class="na">data-count=</span><span class="s">&quot;none&quot;</span>
</span><span class='line'>     <span class="na">data-hashtags=</span><span class="s">&quot;callandresponsedc&quot;</span><span class="nt">&gt;</span>Tweet
</span><span class='line'>  <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script&gt;</span><span class="o">!</span><span class="kd">function</span> <span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">js</span><span class="p">,</span> <span class="nx">fjs</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="nx">s</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">js</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">js</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">id</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">js</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">&quot;http://platform.twitter.com/widgets.js&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">fjs</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">js</span><span class="p">,</span> <span class="nx">fjs</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}(</span><span class="nb">document</span><span class="p">,</span> <span class="s2">&quot;script&quot;</span><span class="p">,</span> <span class="s2">&quot;twitter-wjs&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;chiclet pull-right visible-desktop&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;fb-like&quot;</span> <span class="na">data-send=</span><span class="s">&quot;true&quot;</span> <span class="na">data-width=</span><span class="s">&quot;100&quot;</span>
</span><span class='line'>       <span class="na">data-show-faces=</span><span class="s">&quot;false&quot;</span> <span class="na">data-colorscheme=</span><span class="s">light</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;swappable-content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;</span>About
</span><span class='line'><span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'>  Call + Response is an (almost) annual art show in the nation&#39;s capital that brings together writers and visual artists. The writers provide the call with an original piece of writing and then visual artists generate a new piece of work in response. The end result being two pieces that resonate with each other.
</span><span class='line'>  [etc...]
</span></code></pre></td></tr></table></div></figure>


<p>to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: page
</span><span class='line'>title: About
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>About
</span><span class='line'><span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'>  Call + Response is an (almost) annual art show in the nation&#39;s capital that brings together writers and visual artists. The writers provide the call with an original piece of writing and then visual artists generate a new piece of work in response. The end result being two pieces that resonate with each other.
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It took an hour or so to DRY out everything, and then&#8230;I was done. A site that
had been a mess &#8211; one-off code written years ago for an outdated version of a
framework that I don&#8217;t use anymore &#8211; had become so simple that I could hand it
off to my non-technical cofounder and both of us would be happier for it!</p>

<p>And sure enough, since then, Kira has made numerous updates to the site, each of
which would have taken at least one, maybe a couple, rounds of emails back and
forth, plus a context switch for me to make the changes, and a deploy, another
round of emails to confirm that everything now looked good. Repeat, repeat,
repeat.</p>

<p>I did this with a Django site, but it&#8217;d be just as applicable with a lot of
Wordpress sites, or any CMS, really. Obviously, there are many cases where this
solution wouldn&#8217;t work for a variety of reasons. But if you can make it work,
it&#8217;s a joy to do so!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using a Node repl in Emacs with nvm and npm]]></title>
    <link href="http://williamjohnbert.com/2014/02/using-a-node-repl-with-emacs/"/>
    <updated>2014-02-17T16:37:00-08:00</updated>
    <id>http://williamjohnbert.com/2014/02/using-a-node-repl-with-emacs</id>
    <content type="html"><![CDATA[<p>Running a repl inside Emacs is often convenient for evaluating code, checking
syntax, and myriad other tasks. When I wanted to run a Node REPL, I found that I
needed to do a little set up to get everything working the way I wanted.</p>

<p>My first question was: which Node? With
<a href="https://github.com/creationix/nvm">nvm</a>, I&#8217;ve installed multiple version on my
machine. So I needed a way to specify one to execute.</p>

<p>Another question was: where to run Node? Since <a href="https://www.npmjs.org/">npm</a>
looks inside <code>node_modules</code> directories starting with the current directory and
working up the file system hierarchy, the current working directory is
important. If I want access to the npm modules installed for project A, I need
to start my repl&#8217;s Node process from <code>path/to/projectA</code>.</p>

<p>But that raises another question: what happens when I want to switch to project
B? Do I need to use <code>process.chdir()</code> to switch the Node repl&#8217;s current working
directory to <code>path/to/projectB</code>? That&#8217;s clumsy and annoying.</p>

<p>Here&#8217;s how I answered these questions:</p>

<p><a href="https://github.com/rejeep/nvm.el">nvm.el</a> gives you <code>nvm-use</code> to activate a
   version of Node within Emacs. It&#8217;s basically a nice wrapper around setting
   the enviroment variables <code>NVM_BIN</code> and <code>NVM_PATH</code> and adding the path to the
   Node version you want to use to your <code>PATH</code>. Great!</p>

<p>Except for one problem: <code>nvm-use</code> isn&#8217;t interactive. It&#8217;s meant to be use
programmatically. So I needed to write a small <code>do-nvm-use</code> wrapper that lets me
specify a version and then activate it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nv">require-package</span> <span class="ss">&#39;nvm</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">do-nvm-use</span> <span class="p">(</span><span class="nv">version</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span> <span class="s">&quot;sVersion: &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">nvm-use</span> <span class="nv">version</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">exec-path-from-shell-copy-env</span> <span class="s">&quot;PATH&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To specify where to run Node, I wrote another small defun, named <code>run-node</code>,
that prompts for a directory in which to start Node. Before it does this,
though, it checks whether a program named <code>node</code> is in the <code>exec-path</code>, and if
not, it runs <code>do-nvm-use</code> first. Once we have a Node to execute and a directory
to execute it in, we can make a new <code>comint</code> buffer bound to the repl process.</p>

<p>To address the issue of different repls needing to be run for different
projects, <code>run-node</code> adds the cwd to the buffer name. Repls for project A and
project B will live in buffers named <code>*-node-repl-path/to/projectA</code> and
<code>*-node-repl-path/to/projectB</code>, respectively&mdash;making switching to the right
buffer with <a href="http://www.emacswiki.org/emacs/InteractivelyDoThings">ido</a> trivial.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">run-node</span> <span class="p">(</span><span class="nv">cwd</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span> <span class="s">&quot;DDirectory: &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nv">executable-find</span> <span class="s">&quot;node&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">call-interactively</span> <span class="ss">&#39;do-nvm-use</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">default-directory</span> <span class="nv">cwd</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">pop-to-buffer</span> <span class="p">(</span><span class="nv">make-comint</span> <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;node-repl-%s&quot;</span> <span class="nv">cwd</span><span class="p">)</span> <span class="s">&quot;node&quot;</span> <span class="no">nil</span> <span class="s">&quot;--interactive&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now to start my Node repls, I just call <code>run-node</code> and I&#8217;m all set!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Towards 100% Uptime with Node]]></title>
    <link href="http://williamjohnbert.com/2014/02/towards-100-percent-uptime-with-node/"/>
    <updated>2014-02-17T16:18:00-08:00</updated>
    <id>http://williamjohnbert.com/2014/02/towards-100-percent-uptime-with-node</id>
    <content type="html"><![CDATA[<p>In December, I gave a talk at
<a href="http://www.meetup.com/Nova-Node/events/154016332/">Nova Node</a> called
<a href="http://sandinmyjoints.github.io/towards-100-pct-uptime/">&#8220;Towards 100% Uptime with Node.js&#8221;</a>.
I wrote an accompanying blog post for the
<a href="http://engineering.fluencia.com">Fluencia / SpanishDict engineering blog</a>:
<a href="http://engineering.spanishdict.com/blog/2013/12/20/the-4-keys-to-100-uptime-with-nodejs">The 4 Keys to 100% Uptime with Node.js</a>.</p>

<p>Hopefully these resources will be useful for other Node engineers out
there&mdash;they have helped us have confidence that downtime is not a problem
for our users.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How legit HTTP (with an async io assist) massacred my Node workers]]></title>
    <link href="http://williamjohnbert.com/2013/09/why-chrome-sometimes-sends-the-same-post-multiple-times/"/>
    <updated>2013-09-10T18:55:00-07:00</updated>
    <id>http://williamjohnbert.com/2013/09/why-chrome-sometimes-sends-the-same-post-multiple-times</id>
    <content type="html"><![CDATA[<p>An uncaught exception in our Node app was causing not only one, but two and then
three workers to die. (Fortunately, we hardly ever encounter uncaught
exceptions. Really, just this one since launch a few months ago. We&#8217;re Node
studs! Right?)</p>

<p>The funny thing is that we&#8217;re using Express, which (via Connect) wraps each
request / response in a try / catch. And we use Express&#8217;s error handler, which
returns 500 on unhandled errors.</p>

<p>Another funny thing is we use cluster, which isolates workers from each other.
They live in separate, solipsistic processes.</p>

<p>But instead of returning 500, our worker simply died. And, as if in sympathy,
the rest immediately followed.</p>

<p>Time to get to the bottom of this. A Node stud like me can figure it out. No
sweat. Right?</p>

<p>For a sanity check, I went to Chrome and Firefox&#8217;s network inspectors. Only one
POST, the bad request that triggered the exception. Everything else looks
normal. Sanity: verified.</p>

<p>Then it was on to the
<a href="http://nodejs.org/docs/latest/api/cluster.html#cluster_how_it_works">cluster module</a>.
That magical &#8220;OS load balancing&#8221; seemed highly suspicious. But nope, I asked in
#nodejs and they said that only applies at the TCP connection level. Once a
connection is assigned to a worker, it never goes to another worker. Meaning
that the bad request was isolated&mdash;only the worker who received the initial
connection could encounter it.</p>

<p>But the workers kept on dying.</p>

<p>These workers morted out fast. They didn&#8217;t even return 500, or any kind of
response. The more I thought about it, that didn&#8217;t really seem right. Not right
at all. Why no 500?</p>

<p>But I can only tackle one mystery at a time. I wanted to understand: why did so
many workers die?</p>

<p>Furious googling ensued. My efforts were rewarded with this nugget:</p>

<blockquote><p>If an HTTP/1.1 client sends a request which includes a request body, but which
does not include an Expect request-header field with the “100-continue”
expectation, and if the client is not directly connected to an HTTP/1.1 origin
server, and if the client sees the connection close before receiving any status
from the server, the client SHOULD retry the request.</p></blockquote>

<p><small>(From the
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.2.4">HTTP 1.1 spec, RFC 2616</a>.
<a href="http://stackoverflow.com/a/14345476/599258">Original hat tip</a>, which links to
this
<a href="http://geek.starbean.net/?p=393">informative post about double HTTP requests</a>.)</small></p>

<p>My mind was somewhat blown. The browers were right after all. They were just
following HTTP. And&mdash;helpfully!&mdash;hiding the resent POSTs from the network
inspector.</p>

<p>But POSTs are dangerous. They mutate resources! I must only click the <em>Order</em>
button once or I may get charged multiple times!</p>

<p>I had a thought. One I have often, yet each time, it seems new again: <em>I have
much to learn</em>.</p>

<p>Back to the 500s. Or lack thereof. Which got funnier still when I realized that
other errors in our controllers that threw exceptions <em>did</em> return 500s. Being a
hands-on kind of guy, I added one right at the top of a route controller: <code>throw
new Error("uh-oh")</code>. My dev server spat back: <code>500 Error: uh-oh</code>.</p>

<p>So why did that one particular error never, ever return a 500, or any response
of any kind?</p>

<p>It&#8217;s my fault, really. I&#8217;m still a Node newbie (I must never forget this). I had
missed that because async IO callbacks occur in a different call stack from the
request / response cyle, one that originates from the event loop,
<a href="http://stackoverflow.com/questions/13228649/unable-to-handle-exception-with-node-js-domains-using-express/13240256#13240256">Express&#8217;s try / catch doesn&#8217;t catch them</a>.</p>

<p>It makes total sense. I have much to learn.</p>

<p>So what to do? <code>require('domain')</code> to the rescue. I can write some middleware (a
bit of <a href="https://github.com/brianc/node-domain-middleware">this</a>, a dash of
<a href="https://github.com/mathrawka/express-domain-errors">that</a>) to wrap the request
/ response in a domain.</p>

<p>But how do I get this domain into my controller? My solution was to attach it to
<code>res.locals._domain</code>. Good solution? I don&#8217;t know. I suspect there&#8217;s a better
way. Good enough? It solved my immediate problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Model</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">key</span><span class="o">:</span> <span class="nx">value</span><span class="p">},</span> <span class="nx">res</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">_domain</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">docs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// This callback can throw all it wants. My domain will catch it.</span>
</span><span class='line'><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sweet. Now, armed with a reference to <code>res</code> in the domain error handler, I can
return a 500. Voila, the browser gets its response. No more helpful resent
POSTs. The silent gratitude of the spared workers is its own reward.</p>

<p>Except, do I need to bind every
<a href="https://github.com/LearnBoost/mongoose/pull/1337">mongoose</a> and
<a href="https://github.com/joyent/node/issues/3908">other kind of async IO operation</a>
in my app? There are many.</p>

<p>Many.</p>

<p>I have much to learn.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Allow CORS with localhost in Chrome]]></title>
    <link href="http://williamjohnbert.com/2013/06/allow-cors-with-localhost-in-chrome/"/>
    <updated>2013-06-25T19:04:00-07:00</updated>
    <id>http://williamjohnbert.com/2013/06/allow-cors-with-localhost-in-chrome</id>
    <content type="html"><![CDATA[<p>Today I spent some time wrestling with the notorious
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Same_origin_policy_for_JavaScript">same origin policy</a>
in order to get CORS
(<a href="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS">cross-origin resource sharing</a>)
working in Chrome for development work I was doing between two applications
running on localhost. Setting the <code>Access-Control-Allow-Origin</code> header to <code>*</code>
seemed to have no effect, and
<a href="https://code.google.com/p/chromium/issues/detail?id=67743">this bug report</a>
nearly led me to believe that was due to a bug in Chrome that made CORS with
localhost impossible. It&#8217;s not. It turned out that I also needed some other
CORs-related headers: <code>Access-Control-Allow-Headers</code> and
<code>Access-Control-Allow-Methods</code>.</p>

<p>This (slightly generalized) snippet of <a href="http://expressjs.com">Express.js</a>
middleware is what ended up working for me:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="s2">&quot;/api/*&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s2">&quot;Access-Control-Allow-Origin&quot;</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s2">&quot;Access-Control-Allow-Headers&quot;</span><span class="p">,</span> <span class="s2">&quot;Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s2">&quot;Access-Control-Allow-Methods&quot;</span><span class="p">,</span> <span class="s2">&quot;GET, PUT, POST&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>With that, Chrome started making OPTIONS requests when I wanted to POST from
localhost:3001 to localhost:2002. It seems that using <code>contentType:
application/json</code> for POSTs forces CORS preflighting, which surprised me since
it seems like a common case for APIs, but no matter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="s2">&quot;/api/*&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">method</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">!==</span> <span class="s2">&quot;options&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">204</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs cl-lib madness]]></title>
    <link href="http://williamjohnbert.com/2013/05/emacs-cl-lib-madness/"/>
    <updated>2013-05-27T15:52:00-07:00</updated>
    <id>http://williamjohnbert.com/2013/05/emacs-cl-lib-madness</id>
    <content type="html"><![CDATA[<p>Emacs 24.3 renamed the Common Lisp emulation package from <code>cl</code> to <code>cl-lib</code>. The
<a href="http://www.gnu.org/software/emacs/NEWS.24.3">release notes</a> say that <code>cl</code> in
24.3 is now &#8220;a bunch of aliases that provide the old, non-prefixed names&#8221;, but I
encountered some problems with certain packages searching for&#8211;as best I can
determine&#8211;function names that at some point changed but were not kept around as
aliases. This was particularly problematic when trying to run 24.3 on OS X
10.6.8.</p>

<p>In case anyone else runs into this problem, here&#8217;s my solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">;; Require Common Lisp. (cl in &lt;=24.2, cl-lib in &gt;=24.3.)</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;cl-lib</span> <span class="nv">nil</span> <span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">progn</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">defalias</span> <span class="ss">&#39;cl-block-wrapper</span> <span class="ss">&#39;identity</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">defalias</span> <span class="ss">&#39;member*</span> <span class="ss">&#39;cl-member</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">defalias</span> <span class="ss">&#39;adjoin</span> <span class="ss">&#39;cl-adjoin</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">;; Else we&#39;re on an older version so require cl.</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;cl</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We try to require <code>cl-lib</code>, and when that succeeds, define some aliases so that
packages don&#8217;t complain about missing <code>cl-block-wrapper</code>, <code>member*</code>, and
<code>adjoin</code>. If it doesn&#8217;t succeed, we&#8217;re on an older Emacs, so require the old
<code>cl</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Juxtaposition]]></title>
    <link href="http://williamjohnbert.com/2013/05/juxtaposition/"/>
    <updated>2013-05-16T19:02:00-07:00</updated>
    <id>http://williamjohnbert.com/2013/05/juxtaposition</id>
    <content type="html"><![CDATA[<p>A few days ago, I happened by chance to read these two articles one after the other:</p>

<ul>
<li><p><a href="http://tomayko.com/writings/unicorn-is-unix">I like Unicorn because it&#8217;s Unix</a></p></li>
<li><p><a href="http://highscalability.com/blog/2013/5/13/the-secret-to-10-million-concurrent-connections-the-kernel-i.html">The Secret To 10 Million Concurrent Connections -The Kernel Is The Problem, Not The Solution</a></p></li>
</ul>


<p>The first is about how good Unix is at scaling the scheduling and distribution
of work among processes. The second is about how Unix is the problem when it
comes to the scheduling and distribution of work at scale.</p>

<p>The question, of course, is &#8220;What scale?&#8221;. Like the difference between a cure and a
poison is sometimes the dosage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zero to Node, Again]]></title>
    <link href="http://williamjohnbert.com/2013/01/reprise-of-zero-to-node/"/>
    <updated>2013-01-17T08:09:00-08:00</updated>
    <id>http://williamjohnbert.com/2013/01/reprise-of-zero-to-node</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.meetup.com/node-dc/events/98796672/">NodeDC&#8217;s January meetup</a>,
I&#8217;ll be giving a reprise of my
<a href="http://sandinmyjoints.github.com/zero-to-node/">Zero to Node</a> talk, about
designing, coding, and launching my first web service using Node.js. The meetup
is Wednesday, Jan 23, at Stetson&#8217;s (1610 U St NW). Hope to see you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of Requests 1.0]]></title>
    <link href="http://williamjohnbert.com/2013/01/review-of-requests-1-dot-0/"/>
    <updated>2013-01-14T17:22:00-08:00</updated>
    <id>http://williamjohnbert.com/2013/01/review-of-requests-1-dot-0</id>
    <content type="html"><![CDATA[<p><em>Author&#8217;s note: This piece was <a href="http://thediagram.com/12_6/rev_reitz.html">originally published</a> in the excellent literary journal
 <a href="http://thediagram.com/">DIAGRAM</a>, Issue 12.6. I&#8217;m
 re-publishing here for formatting reasons.</em></p>

<p>Identification with another is addictive: some of my life&#8217;s most profound, memorable experiences have come when something bridged the gap between me and another human. Because I&#8217;m a reader, this can occur across the distance of space and time. It&#8217;s happened with minor Chekov characters, and at the end of Kate Mansfield stories. It happens again and again with Norman Rush and George Saunders. The author has pushed a character through the page and connected with me on a deep level: identification.</p>


<p>Identification happens with computer programming, too.</p>


<p>I say this as a reader, writer, and programmer: I experience identification when reading and programming, and I strive to create it when writing and programming.</p>


<p>Though they deal with the messiness of reality differently, several techniques common to both disciplines enable them to achieve this mental intimacy: navigating complexity; avoiding pitfalls that inhibit communication; choosing structure wisely; harnessing expressive power; and inhabiting other minds. The Requests library, a work of computer programming by Kenneth Reitz, illustrates this.</p>




<!-- more -->




<h2 id="navigating-complexity">Navigating Complexity</h2>


<p>As humans, we&#8217;ve evolved to unconsciously filter the staggering possibilities available to us at each moment. To manage that complexity, we have rules. Humans come with some built in rules (eat when hungry), and easily learn more (don&#8217;t touch hot stoves; don&#8217;t lie, especially to those you love). When I&#8217;m writing, my stories might examine how these rules come into conflict with each other: a government doctor is ordered to a remote, neglected village, and comes to value its people more than his duty to the government.</p>


<p>Computers don&#8217;t come with built-in rules. When I&#8217;m programming, if I make a mistake, the computer marches into it head-on. Computers do precisely and only what you tell them (frustrations with Microsoft Word notwithstanding), and because there are a staggering number of things they can do, programmers constantly battle complexity, sometimes spelling out in excruciating detail exactly what it is we want them to do. Programming is an effort to build up sets of rules that direct the computer to do something helpful.</p>


<p>Staggering possibilities managed by rules: that&#8217;s also a description of natural language. The difference is that natural language has been with our species for a long time. Our brains have evolved pockets that just do languagey stuff. When I write, I benefit from this history.</p>


<p>When it comes to programming, we&#8217;re just getting started. Our brains need help.</p>


<h2 id="avoiding-pitfalls">Avoiding Pitfalls</h2>


<p>Misunderstandings and garbled messages kill identification before it can begin. Grammar, punctuation, and even typing mistakes fatally divert attention from what the writer is trying to say. Layout and space matter, too: linebreaks are essential to poetry, and visual flow to longer narrative. Communication can happen without them, but immersion comes more easily when nothing gets in the way.</p>


<p>The stuff that programmers write, called code, can likewise be correct or incorrect, beautiful or ugly. Requests is written in a programming language called Python <sup><a href="#fn1" class="footnoteRef" id="fnref1">1</a></sup> that&#8217;s known for being easy to read. Unusually for programming languages, Python requires a certain amount of space between bits of code, and its style guide encourages the use of even more space than required. Built-in elements of the language that programmers cannot change have clear and consistent names that further aid comprehension&#8211;not the case in every language. In Requests, Reitz embraces Python&#8217;s style.</p>


<h2 id="structure">Structure</h2>


<p>Options for structure and sequence abound: writers order narrative chronologically, <em>in media res</em>, or in more complex ways. Chapters can be short, long, or omitted. From Volumes and Parts to paragraphs and sentences, structure matters.</p>


<p>Requests&#8217;s dual structure is typical of programming libraries: the code itself, and a document that explains how to use the code. Within the code, there are structures that are roughly analogous in scale to sentences, paragraphs, and chapters, while the documentation proceeds narratively, starting with easy matters and advancing to difficult material.</p>


<p>This bundle of code plus documentation is known as an <em>application programming interface</em>, or <em>API</em>.</p>


<p>APIs are what make it possible to post your Instagram photos to your Facebook timeline, check-in on Foursquare from your iPhone, book a flight on United from Kayak, etc. Without APIs, without a way to share units of functionality with each other, each programmer or programming team would be on its own. Everything would take much, much longer; each programmer would have to reinvent the wheel.</p>


<p>Here&#8217;s an interesting bit of jargon: programmers say that somebody is &quot;exposing an API.&quot; It&#8217;s an act of confidence, but also vulnerability.</p>


<h2 id="expressive-power">Expressive Power</h2>


<p>The number of books to read is huge. Why would you choose one over another? Why might you read a literary novel over, say, a detective novel, or an author you love over one you don&#8217;t? One reason might be that while a thoughtful reader can eke meaning from even the flimsiest of genre novels (sometimes with great satisfaction and enjoyment), we tend to find more significance in novels and poetry that pack their sentences and stanzas with meaning, allusion, emotion, and impact. We might call this <em>expressive power</em>.</p>


<p>The collection of programming libraries is also huge. To show how they vary in expressive power, I need to introduce a bit of programming code:</p>


<pre><code>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; req = urllib2.Request(&#39;http://www.goodreads.com&#39;)
&gt;&gt;&gt; response = urllib2.urlopen(req)
&gt;&gt;&gt; response.read()</code></pre>


<p>This snippet <sup><a href="#fn2" class="footnoteRef" id="fnref2">2</a></sup> is the standard way to retrieve a webpage (specifically, Goodreads&#8217; homepage) using a Python library called urllib2. Requests does the same thing this way:</p>


<pre><code>&gt;&gt;&gt; import requests
&gt;&gt;&gt; response = requests.get(&quot;http://www.goodreads.com&quot;)</code></pre>


<p>Requests&#8217; code is two lines instead of four. That might not seem like a big difference from urllib2, but note it, and bear with me just a bit longer. Both these snippets store the webpage they&#8217;ve retrieved in a variable called <code>response</code>. When I&#8217;m programming, I&#8217;ll want to do something useful with <code>response</code>: save it to a file, show it to a user, parse it to see what books are popular. If I ask Python to describe the <code>response</code> returned by urllib2, I get something like <sup><a href="#fn3" class="footnoteRef" id="fnref3">3</a></sup> this:</p>


<pre><code>&gt;&gt;&gt; response
&lt;addinfourl at 4338521656 whose fp = &lt;socket._fileobject object at 0x10297ce50&gt;&gt;</code></pre>


<p>The <code>response</code> that Requests gives me, on the other hand, looks like:</p>


<pre><code>&gt;&gt;&gt; response
&lt;Response [200]&gt;</code></pre>


<p>Again, Requests is smaller, and it turns out its two lines of code give me something much more useable than urllib2. <code>Response [200]</code> is meaningful; one of the first things every web programmer learns is that, in HTTP, the language of the internet, 200 means, simply, &quot;OK&quot;. Requests lets me know my code succeeded.</p>


<p>The thing that urllib2 gave me, <code>&lt;addinfourl at 4338521656 whose fp = &lt;socket._fileobject object at 0x10297ce50&gt;&gt;</code>, is clear as mud. I can make some guesses about it, but to really understand it, I&#8217;d have to spend time rooting around in documentation. I just wanted to get a web page.</p>


<p>This difference between the two libraries&#8211;their expressive power&#8211;plays out over and over with the rest of their functionality. Fetching a webpage is just scratching the surface, and the efficiency penalty imposed by the gap in expressive power compounds as you do more complicated, hence interesting, things.</p>


<p><code>requests.get</code> is Hemingway, or Strunk and White. Declarative. Terse. Say what you mean as plainly as possible. Behind the scenes, its two lines are doing more work than they seem, the way a good writer&#8217;s sentences accomplish multiple things at once: moving plot forward, imparting character, setting tone, painting a scene.</p>


<p>urllib2&#8217;s jumble is verbose jargon, like legalese: heretofore, whereas, the party of the first part. Its API is a menagerie of abstractions with names such as <code>OpenerDirector</code> and <code>HTTPPasswordMgrWithDefaultRealm</code> <sup><a href="#fn4" class="footnoteRef" id="fnref4">4</a></sup> that must be looked up to be understood, and are often underwhelming in their capabilities.</p>


<p>Greater expressive power matches more closely the workings of my mind, where thought flows in a continuous stream. It eases the transit of thought across the boundary between internal and external. With a good novel or a good API, the pace of comprehension accelerates, syncing with my inner monologue, setting the stage for identification.</p>


<h2 id="dealing-with-reality">Dealing with Reality</h2>


<p>Programmers strive to be subtext-free. The code is tricky enough. Miss a comma or closing brace, and spend hours trying to find your mistake. The computer forgives nothing. Good programmers deal with this by making reality as clean as possible.</p>


<p>For example, within an app that tracks the books you&#8217;ve read, you&#8217;ve either read a book or not, or perhaps you&#8217;re currently reading it. There&#8217;s no &quot;I read a third of it, then put it down for a while,&quot; or &quot;I stole it from a friend and almost finished it but now Vanessa&#8217;s borrowing it, I think.&quot; A system that tried to encode every possible state of any person&#8217;s relationship to their books would never be finished. This is how programmers deal with reality: by cleaning it up.</p>


<p>What I said above about Requests being like Hemingway isn&#8217;t entirely accurate: his clean prose belies a messy reality that is always present; meaning is often unstated. Likewise, when Austen begins, &quot;It is a truth universally acknowledged, that a single man in possession of a good fortune must be in want of a wife,&quot; she is not simply stating a universal truth that she has identified. The sentence comes with subtext: the truth is universal in the minds of some people, but not others, an oxymoron, emphasized by the sentence&#8217;s lack of an active subject. There is also commentary on the relative power of men and women in her time. Here is a richness that demands and rewards repeated reading, offering interpretations as varied as the number of people who read it.</p>


<p>When I write a story, I thrive on subtext, on creating shades of meaning and
multiple readings. Ambiguity and elision and irony are my techniques for dealing
with the messiness of reality. But when I type:</p>


<pre><code>import requests, config
user = config.user
host = config.host
url = "/api/login"
data = {
  "email": user['email'],
  "password": user['password']
}
session = requests.Session()
session.post(host+url, data=data)</code></pre>


<p>I aim to banish ambiguity. I name my variables clearly, according to what data they hold. I structure the code to indicate the flow of execution. Requests helps me here: the last two lines that create a new session correspond to how I intuitively think of creating a session. The equivalent in urllib2 would be messier and more verbose.</p>


<p>I want future readers&#8211;myself and others&#8211;to understand exactly what that code is doing. Future readers are as sure a thing with code as with literature. <sup><a href="#fn5" class="footnoteRef" id="fnref5">5</a></sup> I&#8217;ll be re-reading my code in six months when I add a new feature in another part of the program and it suddenly breaks something here and I have to figure out how they are connected.</p>


<h2 id="what-its-like-to-work-with-a-bad-api">What it&#8217;s like to work with a bad API</h2>


<p>You get annoyed. You say of whoever created it, What were they thinking? You feel bogged down. Nothing comes easy. You have to keep taking breaks. You feel forgetful. You wonder if it&#8217;s your fault, if you&#8217;re missing something everyone else sees. You get a headache. You curse. You may bite or click your nails, or maniacally tap your foot. You want to be doing something else.</p>


<h2 id="grok">Grok</h2>


<p>Programmers put so much value on understanding something with intimate and exhaustive knowledge that traditional programmer slang has its own word for it: <em>grok</em> <sup><a href="#fn6" class="footnoteRef" id="fnref6">6</a></sup>. It&#8217;s from the language of the Martians in Robert Heinlein&#8217;s <em>Stranger in a Strange Land</em>, in which it means literally &quot;to drink&quot; and metaphorically &quot;to be one with.&quot;</p>


<p>In a novel or poem, you&#8217;ve been led to understanding and impression by a succession of images and literary devices and experiences and revelations. In programming, you are led to understanding by encountering problems, ways of thinking about those problems, organizing them, and finally grokking them well enough to devise a solution.</p>


<p>Reitz groks Python and the internet well, better than I ever will, as Austen grokked relationships and power dynamics better than I ever will. Through exposure to their works, I benefit from their experience of the world. In my own work of programming and writing, I strive to match the understanding that they achieved.</p>


<h2 id="theory-of-mind">Theory of Mind</h2>


<p>Writers and programmers inhabit other minds.</p>


<p>Writers inhabit the minds of their characters and of readers of their work.</p>


<p>Programmers inhabit the minds of users. In Reitz&#8217;s case, these are other programmers (as opposed to, say, the programmers of Google Chrome, which is used by non-programmers). Programmers might also be said to inhabit mind of the computer itself.</p>


<p>This habitation of minds outside my own is part of what draws me to both these pursuits. It is a challenge. It broadens my world. Thinking of others, as others think, anticipating their needs and wants and questions, helps me transcend myself and gain perspective. It&#8217;s invigorating!</p>


<h2 id="what-its-like-to-work-with-a-great-api">What it&#8217;s like to work with a great API</h2>


<p>It&#8217;s more than if Lori Moore or John Ashbery published a notebook of exercises and prompts; it&#8217;s as if they published part of their brain, so that you too can run your thoughts through it, and have them upgraded. As you figure out how to do what you set out to do, you realize other things that would also be cool to do, and you find that the API has ways to do them, too! You think the way someone else thought, and understand their thinking on a deep level. You have a sense that we are all in this together. We&#8217;re not so different.</p>


<h2 id="identification">Identification</h2>


<p>Identification is addictive. I seek it out, and I have an urge to spark it in others. The difficulties of navigating complexity while avoid communication pitfalls, of harnessing expressive power, and of inhabiting other minds make it difficult to find and create. If I can ever achieve it in my own work&#8211;whether writing or programming&#8211;it will be through studying&#8211;grokking&#8211;works like <em>Pride and Prejudice</em>, and <em>Requests</em>.</p>


<h2 id="footnotes">Footnotes</h2>


<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>As in Monty Python, not the snake.<a href="#fnref1">^</a></p></li>
<li id="fn2"><p>What does this all mean?</p>
<p>Three greater-than signs (`&gt;&gt;&gt;`) is called a prompt, as in Python is prompting me to give it something to do. The rest of the line after it is what I type. So this:</p>
<pre><code>&gt;&gt;&gt; requests.get(&quot;www.goodreads.com&quot;)
&lt;Result [200]&gt;</code></pre>
<p>is really this little dialog:</p>
<p>Python: I&#8217;m ready! Give me something to do.</p>
<p>Me: Retrieve this webpage, www.goodreads.com, for me.</p>
<p>Python: OK, did that, here&#8217;s what I got.</p>
<p>Writing out prompt/command/result is a common way for programmers to give each other examples: this is what I did; this is what I got; if you do the same, you should get the same result.<a href="#fnref2">^</a></p></li>
<li id="fn3"><p>I say &quot;something like&quot; because the exact details will vary on different computers and at different times of execution.<a href="#fnref3">^</a></p></li>
<li id="fn4"><p>These names are strikingly similar to the kinds of names that are common in another programming language you may have heard of, Java. Why that is is a whole other discussion that gets into very different philosophies about programming languages.<a href="#fnref4">^</a></p></li>
<li id="fn5"><p>An experience I&#8217;ve noticed that&#8217;s common to writers and programmers is looking back at their own work and not recognizing it, with reactions ranging from admiration (How did I do that?) to disgust (What was I thinking?).<a href="#fnref5">^</a></p></li>
<li id="fn6"><p>This definition is taken from The Jargon File, a reference of programming jargon and lore: <a href="http://www.catb.org/jargon/html/G/grok.html">http://www.catb.org/jargon/html/G/grok.html</a><a href="#fnref6">^</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update and Rescheduling]]></title>
    <link href="http://williamjohnbert.com/2012/11/update-and-rescheduling/"/>
    <updated>2012-11-04T22:23:00-08:00</updated>
    <id>http://williamjohnbert.com/2012/11/update-and-rescheduling</id>
    <content type="html"><![CDATA[<p>Hurricane Sandy rescheduled
  <a href="http://www.meetup.com/Nova-Node/events/84918342/"><strong>Zero to Node</strong></a>, my talk
  about writing and deploying a node.js app in production, to Wednesday, November
  7. Hope to see you there!</p>

<p>  (Update: <a href="http://sandinmyjoints.github.com/zero-to-node">here are the slides from my talk</a>.)</p>

<p>  In other news, I&#8217;ve redone this site using <a href="http://octopress.org/">Octopress</a>
  with the <a href="https://github.com/roberto/oct2-orange">oct2-orange theme</a>. Sweet!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Case Study of Node.js in Production]]></title>
    <link href="http://williamjohnbert.com/2012/10/a-case-study-of-node-js-in-production/"/>
    <updated>2012-10-01T14:27:53-07:00</updated>
    <id>http://williamjohnbert.com/2012/10/a-case-study-of-node-js-in-production</id>
    <content type="html"><![CDATA[<p>I&#8217;m giving a talk about my experience <a href="http://www.meetup.com/Nova-Node/events/84918342/">developing and deploying a Node.js web
service in production</a> at the
next Nova-Node meetup, October 30 at 6:30 p.m. Below is the writeup. If it
sounds interesting to you, come by!</p>

<blockquote><p>SpanishDict recently deployed a new text-to-speech service powered by
  Node. This service can generate audio files on the fly for arbitrary Spanish
  and English texts with rapid response times. The presentation will walk
  through the design, development, testing, monitoring, and deployment process
  for the new application. We will cover topics like how to structure an Express
  app, testing and debugging, learning to think in streams and pipes, writing a
  Chef cookbook to deploy to AWS, and monitoring the application for high
  performance. The lead engineer on the project, William Bert, will also talk
  about his experiences transitioning from a Python background to Node and some
  of the key insights he had about writing in Node while developing the
  application.</p></blockquote>

<p>Update: <a href="http://sandinmyjoints.github.com/zero-to-node">here are the slides from the talk</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Relatively) quick and easy Gensim example code]]></title>
    <link href="http://williamjohnbert.com/2012/05/relatively-quick-and-easy-gensim-example-code/"/>
    <updated>2012-05-04T01:12:23-07:00</updated>
    <id>http://williamjohnbert.com/2012/05/relatively-quick-and-easy-gensim-example-code</id>
    <content type="html"><![CDATA[<p>Here&#8217;s some sample code that shows the basic steps necessary to use gensim to create a corpus, train models (log entropy and latent semantic analysis), and perform semantic similarity comparisons and queries.</p>

<p><a href="http://radimrehurek.com/gensim/">gensim</a> has an excellent tutorial, and this does not replace reading and understanding it. Nonetheless, this may be helpful for those interested in doing some quick experimentation and getting their hands dirty fast. It takes you from training corpus to index and queries in about 100 lines of code, much of which is documentation.</p>

<p>Note that this code <strong>will not work out of the box</strong>. To train the models, you need to provide your own background corpus (a collection of documents, where a document can range from one sentence up to multiple pages of text). Choosing a good corpus is an art; generally, you want tens of thousands of documents that are representative of your problem domain. Like the gensim tutorial, this code also shows how to build a corpus from Wikipedia for experimentation, though note that doing so require a lot of computing time. You could potentially <a href="http://williamjohnbert.com/2012/03/how-to-install-accelerated-blas-into-a-python-virtualenv/">save hours by installing accelerated BLAS on your system</a>.</p>

<!-- more -->




<figure class='code'><figcaption><span>Gensim sample code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">logging</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">pprint</span>
</span><span class='line'>
</span><span class='line'><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">stream</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">### Generating a training/background corpus from your own source of documents</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gensim.corpora</span> <span class="kn">import</span> <span class="n">TextCorpus</span><span class="p">,</span> <span class="n">MmCorpus</span><span class="p">,</span> <span class="n">Dictionary</span>
</span><span class='line'>
</span><span class='line'><span class="c"># gensim docs: &quot;Provide a filename or a file-like object as input and TextCorpus will be initialized with a</span>
</span><span class='line'><span class="c"># dictionary in `self.dictionary`and will support the `iter` corpus method. For other kinds of corpora, you only</span>
</span><span class='line'><span class="c"># need to override `get_texts` and provide your own implementation.&quot;</span>
</span><span class='line'><span class="n">background_corpus</span> <span class="o">=</span> <span class="n">TextCorpus</span><span class="p">(</span><span class="nb">input</span><span class="o">=</span><span class="n">YOUR_CORPUS</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Important -- save the dictionary generated by the corpus, or future operations will not be able to map results</span>
</span><span class='line'><span class="c"># back to original words.</span>
</span><span class='line'><span class="n">background_corpus</span><span class="o">.</span><span class="n">dictionary</span><span class="o">.</span><span class="n">save</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;my_dict.dict&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">MmCorpus</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="s">&quot;background_corpus.mm&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">background_corpus</span><span class="p">)</span>  <span class="c">#  Uses numpy to persist wiki corpus in Matrix Market format. File will be several GBs.</span>
</span><span class='line'>
</span><span class='line'><span class="c">### Generating a large training/background corpus using Wikipedia</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gensim.corpora</span> <span class="kn">import</span> <span class="n">WikiCorpus</span><span class="p">,</span> <span class="n">wikicorpus</span>
</span><span class='line'>
</span><span class='line'><span class="n">articles</span> <span class="o">=</span> <span class="s">&quot;enwiki-latest-pages-articles.xml.bz2&quot;</span>  <span class="c"># available from http://en.wikipedia.org/wiki/Wikipedia:Database_download</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This will take many hours! Output is Wikipedia in bucket-of-words (BOW) sparse matrix.</span>
</span><span class='line'><span class="n">wiki_corpus</span> <span class="o">=</span> <span class="n">WikiCorpus</span><span class="p">(</span><span class="n">articles</span><span class="p">)</span>
</span><span class='line'><span class="n">wiki_corpus</span><span class="o">.</span><span class="n">dictionary</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&quot;wiki_dict.dict&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">MmCorpus</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="s">&quot;wiki_corpus.mm&quot;</span><span class="p">,</span> <span class="n">wiki_corpus</span><span class="p">)</span>  <span class="c">#  File will be several GBs.</span>
</span><span class='line'>
</span><span class='line'><span class="c">### Working with persisted corpus and dictionary</span>
</span><span class='line'><span class="n">bow_corpus</span> <span class="o">=</span> <span class="n">MmCorpus</span><span class="p">(</span><span class="s">&quot;wiki_corpus.mm&quot;</span><span class="p">)</span>  <span class="c"># Revive a corpus</span>
</span><span class='line'>
</span><span class='line'><span class="n">dictionary</span> <span class="o">=</span> <span class="n">Dictionary</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">&quot;wiki_dict.dict&quot;</span><span class="p">)</span>  <span class="c"># Load a dictionary</span>
</span><span class='line'>
</span><span class='line'><span class="c">### Transformations among vector spaces</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">LsiModel</span><span class="p">,</span> <span class="n">LogEntropyModel</span>
</span><span class='line'>
</span><span class='line'><span class="n">logent_transformation</span> <span class="o">=</span> <span class="n">LogEntropyModel</span><span class="p">(</span><span class="n">wiki_corpus</span><span class="p">,</span>
</span><span class='line'>    <span class="n">id2word</span><span class="o">=</span><span class="n">dictionary</span><span class="p">)</span>  <span class="c"># Log Entropy weights frequencies of all document features in the corpus</span>
</span><span class='line'>
</span><span class='line'><span class="n">tokenize_func</span> <span class="o">=</span> <span class="n">wikicorpus</span><span class="o">.</span><span class="n">tokenize</span>  <span class="c"># The tokenizer used to create the Wikipedia corpus</span>
</span><span class='line'><span class="n">document</span> <span class="o">=</span> <span class="s">&quot;Some text to be transformed.&quot;</span>
</span><span class='line'><span class="c"># First, tokenize document using the same tokenization as was used on the background corpus, and then convert it to</span>
</span><span class='line'><span class="c"># BOW representation using the dictionary created when generating the background corpus.</span>
</span><span class='line'><span class="n">bow_document</span> <span class="o">=</span> <span class="n">dictionary</span><span class="o">.</span><span class="n">doc2bow</span><span class="p">(</span><span class="n">tokenize_func</span><span class="p">(</span>
</span><span class='line'>    <span class="n">document</span><span class="p">))</span>
</span><span class='line'><span class="c"># converts a single document to log entropy representation. document must be in the same vector space as corpus.</span>
</span><span class='line'><span class="n">logent_document</span> <span class="o">=</span> <span class="n">logent_transformation</span><span class="p">[[</span>
</span><span class='line'>    <span class="n">bow_document</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Transform arbitrary documents by getting them into the same BOW vector space created by your training corpus</span>
</span><span class='line'><span class="n">documents</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Some iterable&quot;</span><span class="p">,</span> <span class="s">&quot;containing multiple&quot;</span><span class="p">,</span> <span class="s">&quot;documents&quot;</span><span class="p">,</span> <span class="s">&quot;...&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">bow_documents</span> <span class="o">=</span> <span class="p">(</span><span class="n">dictionary</span><span class="o">.</span><span class="n">doc2bow</span><span class="p">(</span>
</span><span class='line'>    <span class="n">tokenize_func</span><span class="p">(</span><span class="n">document</span><span class="p">))</span> <span class="k">for</span> <span class="n">document</span> <span class="ow">in</span> <span class="n">documents</span><span class="p">)</span>  <span class="c"># use a generator expression because...</span>
</span><span class='line'><span class="n">logent_documents</span> <span class="o">=</span> <span class="n">logent_transformation</span><span class="p">[</span>
</span><span class='line'>                   <span class="n">bow_documents</span><span class="p">]</span>  <span class="c"># ...transformation is done during iteration of documents using generators, so this uses constant memory</span>
</span><span class='line'>
</span><span class='line'><span class="c">### Chained transformations</span>
</span><span class='line'><span class="c"># This builds a new corpus from iterating over documents of bow_corpus as transformed to log entropy representation.</span>
</span><span class='line'><span class="c"># Will also take many hours if bow_corpus is the Wikipedia corpus created above.</span>
</span><span class='line'><span class="n">logent_corpus</span> <span class="o">=</span> <span class="n">MmCorpus</span><span class="p">(</span><span class="n">corpus</span><span class="o">=</span><span class="n">logent_transformation</span><span class="p">[</span><span class="n">bow_corpus</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Creates LSI transformation model from log entropy corpus representation. Takes several hours with Wikipedia corpus.</span>
</span><span class='line'><span class="n">lsi_transformation</span> <span class="o">=</span> <span class="n">LsiModel</span><span class="p">(</span><span class="n">corpus</span><span class="o">=</span><span class="n">logent_corpus</span><span class="p">,</span> <span class="n">id2word</span><span class="o">=</span><span class="n">dictionary</span><span class="p">,</span>
</span><span class='line'>    <span class="n">num_features</span><span class="o">=</span><span class="mi">400</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Alternative way of performing same operation as above, but with implicit chaining</span>
</span><span class='line'><span class="c"># lsi_transformation = LsiModel(corpus=logent_transformation[bow_corpus], id2word=dictionary,</span>
</span><span class='line'><span class="c">#    num_features=400)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Can persist transformation models, too.</span>
</span><span class='line'><span class="n">logent_transformation</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&quot;logent.model&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">lsi_transformation</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&quot;lsi.model&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">### Similarities (the best part)</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gensim.similarities</span> <span class="kn">import</span> <span class="n">Similarity</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This index corpus consists of what you want to compare future queries against</span>
</span><span class='line'><span class="n">index_documents</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;A bear walked in the dark forest.&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&quot;Tall trees have many more leaves than short bushes.&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&quot;A starship may someday travel across vast reaches of space to other stars.&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&quot;Difference is the concept of how two or more entities are not the same.&quot;</span><span class="p">]</span>
</span><span class='line'><span class="c"># A corpus can be anything, as long as iterating over it produces a representation of the corpus documents as vectors.</span>
</span><span class='line'><span class="n">corpus</span> <span class="o">=</span> <span class="p">(</span><span class="n">dictionary</span><span class="o">.</span><span class="n">doc2bow</span><span class="p">(</span><span class="n">tokenize_func</span><span class="p">(</span><span class="n">document</span><span class="p">))</span> <span class="k">for</span> <span class="n">document</span> <span class="ow">in</span> <span class="n">index_documents</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="n">Similarity</span><span class="p">(</span><span class="n">corpus</span><span class="o">=</span><span class="n">lsi_transformation</span><span class="p">[</span><span class="n">logent_transformation</span><span class="p">[</span><span class="n">corpus</span><span class="p">]],</span> <span class="n">num_features</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span> <span class="n">output_prefix</span><span class="o">=</span><span class="s">&quot;shard&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Index corpus:&quot;</span>
</span><span class='line'><span class="n">pprint</span><span class="o">.</span><span class="n">pprint</span><span class="p">(</span><span class="n">documents</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Similarities of index corpus documents to one another:&quot;</span>
</span><span class='line'><span class="n">pprint</span><span class="o">.</span><span class="n">pprint</span><span class="p">([</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">index</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">query</span> <span class="o">=</span> <span class="s">&quot;In the face of ambiguity, refuse the temptation to guess.&quot;</span>
</span><span class='line'><span class="n">sims_to_query</span> <span class="o">=</span> <span class="n">index</span><span class="p">[</span><span class="n">lsi_transformation</span><span class="p">[</span><span class="n">logent_transformation</span><span class="p">[</span><span class="n">dictionary</span><span class="o">.</span><span class="n">doc2bow</span><span class="p">(</span><span class="n">tokenize_func</span><span class="p">(</span><span class="n">query</span><span class="p">))]]]</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Similarities of index corpus documents to &#39;</span><span class="si">%s</span><span class="s">&#39;&quot;</span> <span class="o">%</span> <span class="n">query</span>
</span><span class='line'><span class="n">pprint</span><span class="o">.</span><span class="n">pprint</span><span class="p">(</span><span class="n">sims_to_query</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">best_score</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">sims_to_query</span><span class="p">)</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="n">sims_to_query</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">best_score</span><span class="p">)</span>
</span><span class='line'><span class="n">most_similar_doc</span> <span class="o">=</span> <span class="n">documents</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;The document most similar to the query is &#39;</span><span class="si">%s</span><span class="s">&#39; with a score of </span><span class="si">%.2f</span><span class="s">.&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">most_similar_doc</span><span class="p">,</span> <span class="n">best_score</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Introduction to gensim: "Topic Modelling for Humans"]]></title>
    <link href="http://williamjohnbert.com/2012/05/an-introduction-to-gensim-topic-modelling-for-humans/"/>
    <updated>2012-05-03T07:06:02-07:00</updated>
    <id>http://williamjohnbert.com/2012/05/an-introduction-to-gensim-topic-modelling-for-humans</id>
    <content type="html"><![CDATA[<p>On Tuesday, I presented at the monthly DC Python meetup. My talk was an introduction to gensim, a free Python framework for topic modelling and semantic similarity using LSA/LSI and other statistical techniques. I&#8217;ve been using gensim on and off for several months at work, and I really appreciate its performance, clean API design, documentation, and community. (All of this is due to its creator, Radim Rehurek, who I interviewed recently.)</p>

<p>The presentation slides are <a href="http://www.slideshare.net/sandinmyjoints/an-introduction-to-gensim-topic-modelling-for-humans">available here</a>. I also wrote some <a href="http://williamjohnbert.com/2012/05/relatively-quick-and-easy-gensim-example-code/">quick gensim example code</a> that walks through creating a corpus, generating and transforming models, and using models to do semantic similarity. The code and slides are both also available on my <a href="https://github.com/sandinmyjoints/gensimtalk">github account</a>.</p>

<p>Finally, I also developed a <a href="http://github.com/sandinmyjoints/visularity">demo app to visualize semantic similarity queries</a>. It&#8217;s a Flask web app, with gensim generating data on the backend that is clustered by scipy and scikit-learn and visualized by d3.js as agglomerative and hierarchical clusters as well as a simple table and dendrogram. To make it all work in realtime, I used threading and hookbox. I call it Visularity, and it&#8217;s <a href="http://github.com/sandinmyjoints/visularity">available on github</a>. You need to provide your own model and dictionary data to use&#8211;check out my presentation and visit <a href="http://radimrehurek.com/gensim">radimrehurek.com/gensim/</a> to learn how. Comments and feedback welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview with Radim Rehurek, creator of gensim]]></title>
    <link href="http://williamjohnbert.com/2012/04/interview-with-radim-rehurek-creator-of-gensim/"/>
    <updated>2012-04-30T05:58:42-07:00</updated>
    <id>http://williamjohnbert.com/2012/04/interview-with-radim-rehurek-creator-of-gensim</id>
    <content type="html"><![CDATA[<p>Tomorrow at the <a href="http://meetup.dcpython.org/events/23832731/">May 2012 DC Python meetup</a>, I&#8217;m giving a talk on <a href="http://radimrehurek.com/gensim/">gensim</a>, a Python framework for topic modeling that I use at work and on my own for semantic similarity comparisons. (I&#8217;ll post the slides and example code for the talk soon.) I&#8217;ve found gensim to be a useful and well-designed tool, and pretty much all credit for it goes to its creator, Radim Rehurek. Radim was kind enough to answer a few questions I sent him about gensim&#8217;s history and goals, and about his background and interests.</p>

<p><strong>WB: Why did you create gensim?</strong></p>

<p>RR: Consulting gig for a digital library project (Czech Digital
Mathematics Library, dml.cz), some 3 years ago. It started off as a
few loosely connected Python scripts to support the &#8220;show similar
articles&#8221; functionality. We wanted to use some of the statistical
methods, like latent semantic analysis. Originally, gensim only
contained wrappers around existing Fortran libraries for SVD, like
Propack and Svdpack.</p>

<p>But there were issues with that, and it scaled badly (all documents in
RAM), so I started looking for more scalable, online algorithms.
Running these popular methods shouldn&#8217;t be so hard, I thought!</p>

<p>In the end, I developed new algorithms for these methods for gensim.
The theoretical part of this research later turned into a part of my
PhD thesis.</p>

<!-- more -->


<p><strong>Who is using gensim (as far as you know)&#8211;academics, hobbyists, commercial entities, a mixture? Any particularly interesting uses?</strong></p>

<p>Yes, I&#8217;ve heard from many academic as well as commercial
organizations, both on the mailing list and off. Off the top of my
head: ravn.co.uk, roistr.com, sportsauthority.com, larkc.eu; TU of
Denmark, U of Stuttgart, Masaryk U, U of Ghent, some people used it in
the Yahoo! KD cup competition&#8230; But what they all did with gensim, or
whether they still use it, I don&#8217;t know. The gensim license (LGPL) is
pretty liberal in that respect.</p>

<p>Unfortunately, all this use rarely translates into any feedback or
contributions. I guess I&#8217;m just not very good at the
bring-new-developers-and-grow-open-source stuff :(</p>

<p><strong>Roughly how much of the current codebase was written by you, and how much by contributors?</strong></p>

<p>Almost everything by me, but I am very grateful for bug fixes and
patches. I try to put every contribution from other people into the
changelog: https://github.com/piskvorky/gensim/blob/develop/CHANGELOG.txt
. I made some wiki pages to make contributing easier:
https://github.com/piskvorky/gensim/wiki . I also try to answer
general questions on the mailing list.</p>

<p><strong>What are your favorite features, or parts of the code that you&#8217;re most proud of?</strong></p>

<p>I don&#8217;t have emotional attachments to parts of the code &#8211; if it&#8217;s
bad, it needs to go. I guess the most proven parts are the ones that
had been around for the longest &#8211; LSA etc. Things that were
contributed recently by other people, like the new HDP (hierarchical
dirichlet process) code, or the <code>gensim.parsing</code> subpackage, are the
most rough around the edges.</p>

<p>The best feature is the memory independence for sure. Most
implementations of the statistical semantics methods assume the
training data resides in RAM, which limits their use to small/medium
corpora. Also they work in batch mode, needing a full re-train when
new training data arrives. The LSA/LDA algos are online though (can be
updated with new data, incrementally).</p>

<p><strong>What&#8217;s your background? Academic, software engineering, both?</strong></p>

<p>I finished my PhD, but I feel more like a software engineer than a
pure researcher. Even during my academic years, I was working in IT
commerce. I wouldn&#8217;t like to stay in academia professionally.</p>

<p><strong>What are you working on next for gensim? What about outside of gensim?</strong></p>

<p>Small things like adding the &#8220;hashing trick&#8221; etc:
https://github.com/piskvorky/gensim/issues . Basically things that
gensim users have been asking for. Some issues keep coming back on the
mailing list, and while not technically bugs, they hint at minor
redesigns and improvements.</p>

<p>One big thing that is missing is a basic visual style for gensim. I
have no clue how to do that and it&#8217;s really pathetic gensim doesn&#8217;t
even have a logo yet!</p>

<p>Outside of gensim, I am busy doing consulting (scaling up text
processing: fulltext search, semantic search, ad targeting etc &#8211;
backend stuff). I&#8217;m planning to do a startup that offers semantic
search and similarity as a service. A kind of easy-to-use black box
tool, something like searchify or myrrix. But it&#8217;s hard to find good
people to work with&#8230; and hard to give up/interrupt a well-paying
career :) I applied for YC last month, alone, but they turned me down.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExtJS TreeStore trouble with nested nodes]]></title>
    <link href="http://williamjohnbert.com/2012/04/extjs-treestore-trouble-with-nested-nodes/"/>
    <updated>2012-04-19T03:23:07-07:00</updated>
    <id>http://williamjohnbert.com/2012/04/extjs-treestore-trouble-with-nested-nodes</id>
    <content type="html"><![CDATA[<p>At work, we&#8217;re building an app to edit objects in a database&#8211;a classic CRUD
application. For now, we&#8217;re trying out ExtJS as the client-side UI
framework. One of the use cases is selecting and editing nested objects,
represented in our relational database with foreign keys. Let&#8217;s call the root
object a Task, which consists of nested Goals, which have Steps. Each of those
is defined by a model on the backend that is more or less mimicked by an
Ext.data.Model on the client-side, and each model has a proxy to a RESTful
endpoint on the backend for create/retrieve/update/delete operations. We want to
use an Ext.tree.TreePanel for the UI, so we hold the data in an
Ext.data.TreeStore. So far so good.</p>

<p>We coded up our prototype, but when a user selects a Task, Ext JS throws this
error: <code>Uncaught TypeError: Cannot read property 'internalId' of
undefined</code>. Hmm. Everything seems to be working. Our models are loading the
correct data. No obvious bugs. A lot of inspecting and googling and reading
documentation later, I discover <a href="http://www.sencha.com/forum/archive/index.php/t-160068.html?s=03fb3a67ebf1e1ef856bc5f277ad12e8">this
thread</a>. The
key quote:</p>

<!-- more -->


<blockquote><p>It doesn&#8217;t matter if the [model] ids are unique within the JSON [or any
  data]. It must be unique within the tree.</p></blockquote>

<p>If you add the first json to the tree with for example the id 4_1 and you add
the second json with again a node 4_1 then you have two nodes with the same id.</p>

<p>In other words, TreeStore doesn&#8217;t distinguish the types of roots and their
children (or children&#8217;s children, etc). To TreeStore, they are <strong>all</strong> nodes,
and ids must be unique across all nodes. If you have an instance of a Task model
with id=1 and it has a foreign key to a Goal that also has id=1, TreeStore has a
problem with that. Apparently it doesn&#8217;t introspect the objects enough to see
that, say, one is a Task and its children are Goals, despite the Task model
having a <code>hasMany</code> field that defines its relation to the Goal model. That seems
counterintuitive to me, maybe even misleading. Perhaps that&#8217;s why we&#8217;re not the
only ones who&#8217;ve
<a href="http://www.sencha.com/forum/showthread.php?129524-CLOSED-Selection-of-Association-in-DataView">had</a>
<a href="http://www.sencha.com/forum/showthread.php?135285-TreeStore-Model-and-quot-id-quot-field">this</a>
<a href="http://www.sencha.com/forum/showthread.php?196396-How-to-add-children-tree-nodes-dynamically">problem</a>.</p>

<p>My quick fix was to write a <code>stringify_id()</code> function to wrap ids passed to the TreeStore with a prefix unique to each type, so the id of Task id=1 becomes &#8220;task-1&#8221;. <code>destringify_id()</code> unwraps the ids that come back through the proxy.</p>

<p>TreeStore&#8217;s <a href="http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.TreeStore">docs</a> do not mention this restriction, as far as I can tell. Maybe if you purchase Ext JS, you get better docs, I&#8217;m not sure. We may be doing just that, so I could have a chance to find out. One of the complaints you sometimes hear about open source is that the docs aren&#8217;t that great, so I&#8217;m curious to see how a for-profit company&#8217;s docs stack up against the documentation culture of the communities I&#8217;m most familiar with (Python and Django), which tend to be pretty solid.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fake bio for Steve]]></title>
    <link href="http://williamjohnbert.com/2012/04/fake-bio-for-steve/"/>
    <updated>2012-04-06T06:53:07-07:00</updated>
    <id>http://williamjohnbert.com/2012/04/fake-bio-for-steve</id>
    <content type="html"><![CDATA[<p>My good friend Steve has hosted <a href="http://826dc.org/?p=3336">the lowercase</a>, the monthly reading series associated with <a href="http://826dc.org/">826DC</a>, for three years. Steve has a charming habit of introducing his readers with made-up bios, so in his honor, I asked some lowercase regulars to write fake bios of him and share them at the third anniversary reading on April 4. The results were highly entertaining; thanks to everyone who wrote one!</p>

<p>Here&#8217;s mine:</p>

<blockquote><p>Steve Souryal is a group of 15 small islets and rocks in the central equatorial Atlantic Ocean. He lies in the Intertropical Convergence Zone, a region of severe storms. Steve exposes serpentinized abyssal mantle peridotite and kaersutite-bearing ultramafic mylonite on the top of the second-largest megamullion in the world (after the Parece Vela megamullion under Okinotoshima in the Pacific). He is the only location in the Atlantic Ocean where the abyssal mantle is exposed above sea level! In 1986, Steve was designated an environmentally protected area, and since 1998, the Danish Navy has maintained a permanently manned research facility in him. His main economic activity is tuna fishing, and we are incredibly lucky to have him with us tonight.</p></blockquote>

<p>Apologies to Wikipedia. But somehow, it just feels right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install accelerated BLAS into a Python virtualenv]]></title>
    <link href="http://williamjohnbert.com/2012/03/how-to-install-accelerated-blas-into-a-python-virtualenv/"/>
    <updated>2012-03-23T13:43:33-07:00</updated>
    <id>http://williamjohnbert.com/2012/03/how-to-install-accelerated-blas-into-a-python-virtualenv</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>Some mathematically intense operations that use Numpy/Scipy can run faster with accelerated basic linear algebra subroutine (BLAS) libraries installed on your system (e.g., <a href="http://radimrehurek.com/gensim/">gensim&#8217;s</a> corpus processing).</p>

<p>To see what BLAS libraries you are using, do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="s">&#39;import numpy; numpy.show_config()&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If none of them are installed, you probably want to install one or
more. <a href="http://math-atlas.sourceforge.net/">ATLAS</a> is always a good bet, since
it&#8217;s portable and self-optimizing. There are others out there targeted at
particular CPU architectures.</p>

<!-- more -->


<p>Unfortunately, the <a href="http://docs.scipy.org/doc/numpy/user/install.html">Scipy
docs</a> are out of date
regarding installing accelerated BLAS libraries on Ubuntu. The instructions I
have written below work for Ubuntu 10.04, the current LTS (long-term support)
version, and though I haven&#8217;t tried to run them on a more recent version, it&#8217;s
possible they work with those as well.</p>

<h2>Prereqs</h2>

<p>On Ubuntu 10.04, and possibly other versions, you need liblapack-dev and gfortran (yes, fortran):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install liblapack-dev
</span><span class='line'><span class="nv">$ </span>sudo apt-get install gfortran
</span></code></pre></td></tr></table></div></figure>


<h2>Instructions</h2>

<p>Install the accelerated linear algebra libraries (ATLAS/LAPACK) in your virtualenv on Ubutu:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>workon <span class="o">[</span>envname<span class="o">]</span>
</span><span class='line'>pip uninstall numpy <span class="c">## only if numpy is already installed</span>
</span><span class='line'>pip uninstall scipy <span class="c">## only if scipy is already installed</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LAPACK</span><span class="o">=</span>/usr/lib/liblapack.so
</span><span class='line'><span class="nb">export </span><span class="nv">ATLAS</span><span class="o">=</span>/usr/lib/libatlas.so
</span><span class='line'><span class="nb">export </span><span class="nv">BLAS</span><span class="o">=</span>/usr/lib/libblas.so
</span></code></pre></td></tr></table></div></figure>


<p>Now you can install numpy and scipy into the same virtualenv and be confident they will perform operations using the accelerated BLAS routines:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install numpy
</span><span class='line'><span class="nv">$ </span>pip install scipy
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Novelties & Traditions]]></title>
    <link href="http://williamjohnbert.com/2011/11/novelties-traditions/"/>
    <updated>2011-11-19T02:28:21-08:00</updated>
    <id>http://williamjohnbert.com/2011/11/novelties-traditions</id>
    <content type="html"><![CDATA[<p>Today&#8217;s the third annual Friendsgiving, a Thanksgiving-like pre-Thanksgiving event for a bunch of people who like each other; hence, Friendsgiving. Thanksgiving&#8217;s always been my favorite holiday so I&#8217;m more than happy to celebrate it twice a year. The first two Friendsgivings took place at my house, but because in the spring I traded my room in a cavernous and amply chandeliered group rowhouse for cozier and warmer digs, the honor of hosting this year falls to two friends who&#8217;re renting an entire lovely house for themselves up in Pleasant Plains. Sweet.</p>

<p>So much for traditions; recent novelties include starting a new job, about which more another time, but basically, I love it; and getting a lesson plan published in <a href="http://www.amzn.com/111802432X">Don&#8217;t Forget to Write</a>, the second volume of lesson plans from <a href="http://www.826national.org/">826</a>. The lesson plan, &#8220;Busted,&#8221; aims to make storytellers out of middle schoolers by having them write about a time they got caught doing something they shouldn&#8217;t have been doing&#8211;a theme first cooked up by the folks who led the <a href="http://826dc.org/?p=510">Get Used to the Seats</a> book project. I <a href="http://williamjohnbert.com/2010/11/caught-in-the-act-part-3/">wrote about leading the workshops that ultimately became the &#8220;Busted&#8221; lesson plan</a> more than a year ago&#8211;right around the previous Friendsgiving. Hard to believe it&#8217;s been that long!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gender, programming, and the power of language ]]></title>
    <link href="http://williamjohnbert.com/2011/08/gender-programming-and-the-power-of-language/"/>
    <updated>2011-08-28T09:15:02-07:00</updated>
    <id>http://williamjohnbert.com/2011/08/gender-programming-and-the-power-of-language</id>
    <content type="html"><![CDATA[<p>An interlude from the recent trend of hardcore Django action:</p>

<blockquote><p>When I spoke with a female intern this summer, she recounted how, in 2006, the
GNOME Project, a free and open source software project, received almost 200 Google
Summer of Code applicants. All of them were male. When GNOME advertised an
identical program for women, emphasizing opportunities for learning and mentorship
instead of tough competition, they received more than 100 highly qualified female
applicants for the three spots they were able to fund. What amazed me even more was
when she suggested that our own company slogan — “We Help the World’s Best
Developers Make Better Software” — might alienate prospective female candidates.
That had never occurred to me. But according to our intern, in the world of
computer science, “when you hear the phrase ‘the world’s best developers,’ you see
a guy.”</p></blockquote>

<p>From <a href="http://www.washingtonpost.com/opinions/when-computer-programming-was-womens-work/2011/08/24/gIQAdixGgJ_print.html">When computer programming was ‘women’s work’</a>.</p>
]]></content>
  </entry>
  
</feed>
