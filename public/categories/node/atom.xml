<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node | William John Bert]]></title>
  <link href="http://williamjohnbert.com/categories/node/atom.xml" rel="self"/>
  <link href="http://williamjohnbert.com/"/>
  <updated>2015-02-18T07:58:01-08:00</updated>
  <id>http://williamjohnbert.com/</id>
  <author>
    <name><![CDATA[William John Bert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using a Node repl in Emacs with nvm and npm]]></title>
    <link href="http://williamjohnbert.com/2014/02/using-a-node-repl-with-emacs/"/>
    <updated>2014-02-17T16:37:00-08:00</updated>
    <id>http://williamjohnbert.com/2014/02/using-a-node-repl-with-emacs</id>
    <content type="html"><![CDATA[<p>Running a repl inside Emacs is often convenient for evaluating code, checking
syntax, and myriad other tasks. When I wanted to run a Node REPL, I found that I
needed to do a little set up to get everything working the way I wanted.</p>

<p>My first question was: which Node? With
<a href="https://github.com/creationix/nvm">nvm</a>, I&#8217;ve installed multiple version on my
machine. So I needed a way to specify one to execute.</p>

<p>Another question was: where to run Node? Since <a href="https://www.npmjs.org/">npm</a>
looks inside <code>node_modules</code> directories starting with the current directory and
working up the file system hierarchy, the current working directory is
important. If I want access to the npm modules installed for project A, I need
to start my repl&#8217;s Node process from <code>path/to/projectA</code>.</p>

<p>But that raises another question: what happens when I want to switch to project
B? Do I need to use <code>process.chdir()</code> to switch the Node repl&#8217;s current working
directory to <code>path/to/projectB</code>? That&#8217;s clumsy and annoying.</p>

<p>Here&#8217;s how I answered these questions:</p>

<p><a href="https://github.com/rejeep/nvm.el">nvm.el</a> gives you <code>nvm-use</code> to activate a
   version of Node within Emacs. It&#8217;s basically a nice wrapper around setting
   the enviroment variables <code>NVM_BIN</code> and <code>NVM_PATH</code> and adding the path to the
   Node version you want to use to your <code>PATH</code>. Great!</p>

<p>Except for one problem: <code>nvm-use</code> isn&#8217;t interactive. It&#8217;s meant to be use
programmatically. So I needed to write a small <code>do-nvm-use</code> wrapper that lets me
specify a version and then activate it:</p>

<pre><code class="common-lisp">(require-package 'nvm)

(defun do-nvm-use (version)
  (interactive "sVersion: ")
  (nvm-use version)
  (exec-path-from-shell-copy-env "PATH"))
</code></pre>

<p>To specify where to run Node, I wrote another small defun, named <code>run-node</code>,
that prompts for a directory in which to start Node. Before it does this,
though, it checks whether a program named <code>node</code> is in the <code>exec-path</code>, and if
not, it runs <code>do-nvm-use</code> first. Once we have a Node to execute and a directory
to execute it in, we can make a new <code>comint</code> buffer bound to the repl process.</p>

<p>To address the issue of different repls needing to be run for different
projects, <code>run-node</code> adds the cwd to the buffer name. Repls for project A and
project B will live in buffers named <code>*-node-repl-path/to/projectA</code> and
<code>*-node-repl-path/to/projectB</code>, respectively&mdash;making switching to the right
buffer with <a href="http://www.emacswiki.org/emacs/InteractivelyDoThings">ido</a> trivial.</p>

<pre><code class="common-lisp">(defun run-node (cwd)
  (interactive "DDirectory: ")
  (unless (executable-find "node")
    (call-interactively 'do-nvm-use))
  (let ((default-directory cwd))
        (pop-to-buffer (make-comint (format "node-repl-%s" cwd) "node" nil "--interactive"))))
</code></pre>

<p>Now to start my Node repls, I just call <code>run-node</code> and I&#8217;m all set!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Towards 100% Uptime with Node]]></title>
    <link href="http://williamjohnbert.com/2014/02/towards-100-percent-uptime-with-node/"/>
    <updated>2014-02-17T16:18:00-08:00</updated>
    <id>http://williamjohnbert.com/2014/02/towards-100-percent-uptime-with-node</id>
    <content type="html"><![CDATA[<p>In December, I gave a talk at
<a href="http://www.meetup.com/Nova-Node/events/154016332/">Nova Node</a> called
<a href="http://sandinmyjoints.github.io/towards-100-pct-uptime/">&#8220;Towards 100% Uptime with Node.js&#8221;</a>.
I wrote an accompanying blog post for the
<a href="http://engineering.fluencia.com">Fluencia / SpanishDict engineering blog</a>:
<a href="http://engineering.spanishdict.com/blog/2013/12/20/the-4-keys-to-100-uptime-with-nodejs">The 4 Keys to 100% Uptime with Node.js</a>.</p>

<p>Hopefully these resources will be useful for other Node engineers out
there&mdash;they have helped us have confidence that downtime is not a problem
for our users.</p>
]]></content>
  </entry>
  
</feed>
